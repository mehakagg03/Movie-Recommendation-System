# -*- coding: utf-8 -*-
"""Movie Recommendation System using ml and python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JZjdRmfbiDyhtS04yGeYcBoMzwxOntJK

importing the dependencies
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data Collection and Pre-Processing"""

#loading the data from the csv file to a pandas dataframe
movies_data=pd.read_csv('../movies for project.csv')

#printing the first 5 rows of the dataframe
movies_data.head()

#number of rows and columns in the dataframe
movies_data.shape

#selecting the relevant features for recommendations
selected_features=['genres','keywords','tagline','cast','director']
print(selected_features)

#replacing the null value for null string
for feature in selected_features:
  movies_data[feature]=movies_data[feature].fillna('')

#combining all the files selected feature
combined_features=movies_data['genres']+'  '+movies_data['keywords']+'  '+movies_data['tagline']+'  '+movies_data['cast']+'  '+movies_data['director']
print(combined_features)

#coverting the text data to feature vectors (cosine value works for numerical data)
vectorizer=TfidfVectorizer()
#features_vector have  stored numeric data in it.
features_vectors=vectorizer.fit_transform(combined_features)
print(features_vectors)

"""cosine similarity"""

#getting the similarity score using cosine similarity
similarity=cosine_similarity(features_vectors)
print(similarity)

print(similarity.shape)
#movie index,similarity score
#the single movie like avatar is compared with all the other movies for their similarity score

#getting movie name from user
movie_name=input('enter your favourite name:')

#creating list with all the movies names given in the movies given in dataset.
list_of_all_titles=movies_data['title'].tolist()
print(list_of_all_titles)

#finding the close match for the movie name given by the user
find_close_match=difflib.get_close_matches(movie_name,list_of_all_titles)
print(find_close_match)

close_match=find_close_match[0]
print(close_match)

#finding the index of the movie with the title
index_of_the_movie=movies_data[movies_data.title==close_match]['index'].values[0]
print(index_of_the_movie)

#getting list of similar movies
similarity_score=list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)
#index of movie,similarity score of movie in comparison to iron man movie
len(similarity_score)

#sorting the movie based on their similarity score
sorted_similar_movies=sorted(similarity_score,key=lambda x:x[1],reverse=True)
print(sorted_similar_movies)
#(index of the movie,its similarity with the movie name given above by the user )

#print the name of similar movies based on the index.
print('movies suggested for you:\n')
i=1
for movie in sorted_similar_movies:
  index=movie[0]
  title_from_index=movies_data[movies_data.index==index]['title'].values[0]
  if i<30:
      print(i,'.',title_from_index)
      i+=1

"""movie recommendations system"""

#for suggesting similar movies and similar movies of same director
'''movie_name=input("enter your favourite movie name:")
list_of_all_titles=movies_data['title'].tolist()
find_close_match=difflib.get_close_matches(movie_name,list_of_all_titles)
close_match=find_close_match[0]
index_of_the_movie=movies_data[movies_data.title==close_match]['index'].values[0]
similarity_score=list(enumerate(similarity[index_of_the_movie]))
sorted_similar_movies=sorted(similarity_score,key=lambda x:x[1],reverse=True)
print('movies suggested for you:\n')
i=1
for movie in sorted_similar_movies:
  index=movie[0]
  title_from_index=movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
      print(i,'.',title_from_index)
      i+=1'''
import pandas as pd
import difflib

# Load CSV file
movies_data = pd.read_csv("../movies for project.csv")

# User input for movie name
movie_name = input("Enter your favourite movie name: ")

# Convert movie titles to a list
list_of_all_titles = movies_data['title'].tolist()

# Find the closest matching movie
find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
if find_close_match:
    close_match = find_close_match[0]
    index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

    # Similarity-based recommendations
    similarity_score = list(enumerate(similarity[index_of_the_movie]))
    sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)

    print("\nMovies suggested for you:\n")
    i = 1
    for movie in sorted_similar_movies:
        index = movie[0]
        title_from_index = movies_data[movies_data.index == index]['title'].values[0]
        if i < 30:
            print(i, ".", title_from_index)
            i += 1

    # Fetch director name for the input movie
    director_name = movies_data[movies_data.title == close_match]['director'].values[0]

    print(f"\nMovies directed by {director_name}:\n")

    # Filter and display movies by the same director
    movies_by_director = movies_data[movies_data.director == director_name]['title'].tolist()

    for j, movie in enumerate(movies_by_director, 1):
        print(f"{j}. {movie}")
else:
    print("No close match found for the given movie name.")




